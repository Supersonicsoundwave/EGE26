# библиотека для работы с регулярными выражениями
import re

text1 = 'Мама мыла раму'
pattern1 = 'Мама'
# match() - проверяет, встречается ли шаблон в начале текста
# возвращает match-объект
res1 = re.match(pattern1, text1)

res1_2 = res1.group() # выводит содержимое найденой подстроки
res1_3 = res1.span() # выводит индексы найденой подстроки
res1_4 = res1.start() # выводит индекс начала найденой подстроки
res1_5 = res1.end() # выводит индекс конца найденой подстроки


text2 = 'Мама мыла раму. Мама мыла машину'
pattern2 = 'мыла'
# search() - находит первое слева выхождение паттерна в строку
# возвращает match-объект
res2 = re.search(pattern2, text2)

text3 = 'ABBABBBABABAB'
pattern3 = 'BAB'
# finditer() - ищет все непересекающиеся(!!!!) совпаения в строке
# возвращает итератор, содержащий macth-объекты каждого совпадения
res3 = re.finditer(pattern3, text3)
res3_1 = [match for match in res3] # извлечение всех match-объектов в список

text4 = 'ABABABABABABABBABABABBBABB'
pattern4 = 'ABA'
# findall() - ищет все непересекающиеся совпадения в строке
# возвращает список строк, содержащий найденные совпадения
res4 = re.findall(pattern4, text4)

text5 = 'user1@gmail.ru, user2@gmail.ru, user3@gmail.com'
pattern5 = r'\.ru'
# sub() - позволяет осуществлять замену подстроки,
# соответствующую заданному шаблону в тексте
res5 = re.sub(pattern5, '.com', text5, count=1)
print(res5)


# метасимволы
# . - любой символ
# \d - любая цифра
# \D - любая НЕ цифра
# \s - любой пробельный символ (пробел, табуляция и \n)
# \S - любой НЕ пробельный символ
# \w - любая цифра, или буква, или _
# \b - граница слова
# \B - НЕ граница слова


# шаблоны с диапазонами
# [0-5] - любая цифра от 0 до 5 включительно
# [02468] - четные цифры
# [a-z] - любая латинская буква в нижнем регистре
# [A-Z] - любая латинская буква в верхнем регистре
# [а-яёА-ЯЁ] - любая кириллическая буква
# ^ - исключает указаные символы
# [^a-z] - любые символы, кроме маленьких латинских букв


# квантификаторы
# {m,n} - от m до n повторений предыдущего символа включительно
# + | {1,} - символ должен встречаться хотя бы 1 раз
# * | {0,} - символ встречается любое количество раз, в том числе 0 раз
# ? |{0,1} - символ встречается 0 или 1 раз


# жадные / ленивые квантификаторы
# квантификаторы всегда жадные, т.е. стараются взять максимальное кол-во символов
# чтобы сделать квантификатор ЛЕНИВЫМ, ставим после него ?

text6= 'кт коот кооот коооот кит киит кииит киииит'
pattern6 = r'к.*?т'
print(re.findall(pattern6, text6))


# скобочные группы - ()
# положительные опережающие проверки - (?=...) заканчивается на ... (обрезает ...)
# отрицательные опережающие проверки - (?!...) не заканчивается на ...
# положительные ретроспективные проверки - (?<=...) начинается на ...
# отрицательные ретроспективные проверки - (?<!...) не начинается на ...
